{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","props","react_default","a","createElement","className","text-success","launch","launch_success","text-danger","mission_name","dist_default","format","launch_date_local","Link","to","concat","flight_number","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","react_apollo_browser_umd","query","_ref","loading","data","error","console","log","launches","map","Component","LAUNCH_QUERY","Launch_templateObject","Launch","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","BrowserRouter","style","margin","width","display","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.735a734e.chunk.js","sourcesContent":["import React from 'react'\nimport className from 'classname'\nimport Moment from 'react-moment'\nimport {Link} from 'react-router-dom'\n\nexport default function LaunchItem(props) {\n    // console.log(props.launch);\n    return (\n    <div className=\"card card-body mb-3\">\n      <div className=\"row\">\n        <div className=\"col-md-9\">\n            <h4>Mission Name : <span className={className({\n              'text-success' : props.launch.launch_success,\n              'text-danger' : ! props.launch.launch_success\n            })}>{props.launch.mission_name}</span></h4>\n            <p className=\"lead\">Date : <Moment format='DD-MM-YYYY'>{props.launch.launch_date_local}</Moment></p>\n        </div>\n        <div className=\"col-md-3\">\n            <Link to={`launch/${props.launch.flight_number}`} className=\"btn btn-secondary\">Details</Link>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"py-3\">\n      <p>\n        <span className=\"px-3 mr-2 bg-success\" /> - Success\n      </p>\n      <p>\n        <span className=\"px-3 mr-2 bg-danger\" /> - Fail\n      </p>\n    </div>\n  )\n}\n","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag'\nimport { Query } from 'react-apollo'\nimport LaunchItem from './LaunchItem'\nimport MissionKey from './MissionKey'\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery{\n    launches {\n      flight_number,\n      launch_success,\n      mission_name,\n      launch_year,\n      launch_date_local\n    }\n  }    \n`;\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"display-4 my-3\">Launches</h1>\n        <MissionKey />\n        <Query query={LAUNCHES_QUERY}>\n        {\n            ({loading,data,error}) => {\n\n                if(loading) return <h4>Loading...</h4>;\n\n                if(error) console.log(error);\n\n                return <Fragment>\n                    {\n                        data.launches.map(launch => (\n                            <LaunchItem key={launch.flight_number} launch={launch}></LaunchItem>\n                        ))\n                    }\n                </Fragment>; \n            }\n        }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launches\n","import React, { Component, Fragment } from 'react'\nimport {Link} from 'react-router-dom'\nimport className from 'classname'\nimport gql from 'graphql-tag'\nimport {Query} from 'react-apollo'\nimport Moment from 'react-moment'\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery( $flight_number : Int!){\n        launch(flight_number:$flight_number){\n            mission_name\n            flight_number\n            launch_success\n            launch_date_local\n            launch_year\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport class Launch extends Component {\n    render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n    return (\n      <Fragment>\n        <Query query={LAUNCH_QUERY} variables={{flight_number}}>\n        {\n            ({loading,data,error}) => {\n                if(loading) return <h4>Loading...</h4>\n                \n                if(error) console.log(error);\n\n                // console.log(data); \n\n                const {\n                    mission_name,\n                    flight_number,\n                    launch_success,\n                    launch_date_local,\n                    launch_year,\n                    rocket : {\n                        rocket_id,\n                        rocket_name,\n                        rocket_type\n                    }\n                } = data.launch;\n\n                return (\n                    <div>\n                        <h1 className=\"my-3 display-4\">\n                            <span className=\"text-dark\">Mission : </span> {mission_name}\n                        </h1>\n                        <ul className=\"list-group\">\n                            <li className=\"list-group-item\">\n                                <span className=\"text-dark\">Flight Number : </span> {flight_number}\n                            </li>\n\n                            <li className=\"list-group-item\">\n                                <span className=\"text-dark\">Launch Year : </span> {launch_year}\n                            </li>\n\n                            <li className=\"list-group-item\">\n                                <span className=\"text-dark\">Launch Success : </span> <span className = {className({ 'text-success' : launch_success, 'text-danger' : !launch_success })}>{launch_success ? 'True' : 'False'}</span>\n                            </li>\n\n                            <li className=\"list-group-item\">\n                                <span className=\"text-dark\">Launch Date : </span> <Moment format='DD-MM-YYYY'>{launch_date_local}</Moment>\n                            </li>\n\n                            <li className=\"list-group-item\">\n                                <span className=\"text-dark\">Launch Timings in Hours : </span> <Moment format='HH:mm:ss'>{launch_date_local}</Moment>\n                            </li>\n                        </ul>\n\n                        <h2 className=\"my-3\">Rocket Details</h2>\n                        <ul className=\"list-group\">\n                            <li className=\"list-group-item\">\n                                <span className=\"text-dark\">Rocket Name : </span> {rocket_name}\n                            </li>\n\n                            <li className=\"list-group-item\">\n                                <span className=\"text-dark\">Rocket Id : </span> {rocket_id}\n                            </li>\n\n                            <li className=\"list-group-item\">\n                                <span className=\"text-dark\">Rocket Type : </span> {rocket_type}\n                            </li>\n                        </ul>\n\n                        <hr/>\n                        <Link to='/' className=\"btn btn-secondary\">Back</Link> \n                    </div>\n                );\n            }\n        }\n        </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launch\n","import React, { Component } from 'react'\nimport ApolloClient from 'apollo-boost'\nimport {ApolloProvider} from 'react-apollo' \nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nimport './App.css'\nimport Launches from './components/Launches'\nimport Launch from './components/Launch'\n\nconst client = new ApolloClient({\n  uri: '/graphql' \n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <h1 style={{ margin:'auto', width : 300, display : 'block' }}>SpaceX</h1>\n            <Route exact path=\"/\" component={Launches}></Route>\n            <Route exact path=\"/launch/:flight_number\" component={Launch}></Route>\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}